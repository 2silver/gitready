---
published: false
layout: post
title: how git stores your data
category: beginner
---

Ceci est un aperçu très général du fonctionnement du modèle objet de Git, basé en grande partie sur le  "Git Community Book":http://book.git-scm.com/1_the_git_object_model.html. Les prochains articles reviendrons sur le modèles objet en profondeur, mais cette information est vraiment essentielle pour ceux qui veulent apprendre git. Les images de cette articles sont extraites de ma présentation sur "la collaboration sur des projets opensource avec git et github":http://litanyagainstfear.com/blog/2008/12/05/open-source-collaboration-with-git-and-github/

L'unité de stockage la plus basique est le blob. Git conserve *uniquement* le contenu du fichier dans l'historique des verions, et pas seulement la différence entre les fichiers entre deux modifications. Le contenu est alors référencé par une "clé de hashage SHA1":http://en.wikipedia.org/wiki/SHA1" de type caractère, ce qui garantie presque son unicité. Presque chaque objet, que cela soit un commit, un arbre ou un blob possède un SHA, vous feriez mieux de commencer dès maintenant à les apprécier. Heureusement, on peut y faire référence de manière simple en utilisant leurs 7 premiers caractères ce qui est habituellement suffisant pour identifier la chaine complète.

L'immense avantage de stocker uniquement le contenu est que si vous avez deux copies ou plus d'un même fichier dans votre dépôt, Git ne va réellement stocker qu'une seule copie. Un blob peut être représenté ainsi:

p=. !/images/object1.png!

Le prochain objet est un arbre. On peut le visualiser comme un répertoire: ils contiennent des répertoires et des blobs.

p=. !/images/object2.png!

Finalement, cela nous amène au plus important des objets : le commit. Les commits peuvent être vu comme des photos: ils gardent une trace de l'état des arbres à un moment donné. Ils conservent également des informations, par exemple l'auteur, la date, et le message associé.

p=. !/images/object3.png!

Les commits sont organisés en "Graphe Acyclique Dirigé":http://en.wikipedia.org/wiki/Directed_acyclic_graph. Pour ceux qui auraient raté ce cours, cela siginife que les commits sont "orientés" dans une direction. Habituellement cette direction est simplement le flux de votre historique de version, qui peut être très simple ou assez complexe si vous avez des branches. Un aperçu général pourrait ressembler à ça:

p=. !/images/object4.png!

Cela devient plus clair quand on utilise des outils comme "GitX":http://gitready.com/intermediate/2009/01/13/visualizing-your-repo.html. Vous pouvez voir les objets liés aux commits et leurs données, et à partir de ces données retrouver l'arbre lié à ce commit.

p=. !/images/object5.png!

J'espère que maintenant quand vous verrez des mots étranges dans vos commits, vous comprendrez un peut mieux comment cela marche. Je vous conseille la lecture du superbe guide "Git pour l'informatique scientifique":http://eagain.net/articles/git-for-computer-scientists/ et les vidéos de "Scott Chacon":http://jointheconversation.org sur "Getting Git":http://gitcasts.com/git-talk.
