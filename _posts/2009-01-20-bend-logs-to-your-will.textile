---
layout: post
title: Protokolle (Logs) nach eigenem Willen verbiegen
category: advanced
published: true
---

@git log@ ist ein extrem mächtiger Befehl mit einer Reihe von Optionen. Er ist äußerst nützlich, um herauszufinden, welche Arbeit im Repository durch wen gemacht wurde. Dieser Beitrag listet ein paar mehr Optionen auf. Die meisten Tipps wurden aus Scott Chacons "gitcast on git log":http://gitcasts.com/posts/git-log und R. Tyler Ballances "git protip series":http://unethicalblogger.com/posts/2008/12/git_protip_learning_your_history_git_log entnommen.

@git log -<n>@

Zeigt das Protokoll für @n@ Übergaben (Commits). @git log -2@ zum Beispiel zeigt die letzten zwei Übergaben.

@git log --stat@

Zeigt das Protokoll mit einer Darstellung für geänderte Dateien und deren Einfügungen und Löschungen. Im Grunde genommen handelt es sich um die normale Ausgabe von @git commit@, die an jeden Protokolleintrag angehängt wird.

@git log --name-status@

Hängt SVN-ähnliche add/modified/deleted Informationen für jede Übergabe an. Das ist recht einfach, liefert aber eine anständige Idee davon, was sich geändert hat.

@git log --pretty=oneline@

Reduziert jede Übergabe auf ihren SHA und ihre Nachricht auf eine Zeile. Über eine Pipe an @wc -l@ übergeben, wird die Anzahl der Übergaben gezählt!

@git log origin..HEAD@

Zeigt Übergaben, die noch nicht an deinen @origin@ Remote hochgeladen wurden. (Danke für den Tip, Ryan Bates!)

@git log <file>@

Zeigt alle Übergaben, die nur eine Datei betreffen.

@git log --no-merges --author=dave@

Zeigt alle Übergaben, an denen dave gearbeitet hat und ignoriert alle Zusammenführungen um das "Rauschen" zu unterdrücken.

@git log --since="1 week ago"@

Gibt alle Übergaben aus, die in der vergangenen Woche dazu gekommen sind. Die Option kann einfach mit @yesterday@ (gestern), @1 year ago@ (vor einem Jahr), @3 months ago@ (vor drei Monaten), @1/20/09@ und so weiter ersetzt werden. Es gibt auch anderen zeitbasierte Optionen: @--after@, @--until@ und @--before@, falls du kreativ werden möchtest.

@git log --grep='^Bump'@

Durchsucht die Übergabenachrichten nach jenen Übergaben, die mit der Zeichenkette "Bump" beginnen. Der Befehl nimmt jegliche regulären Ausdrücke entgegen. Du suchst nach einer Übergabe und du kannst dich nur an einen Teil der Übergabenachricht erinnern, @--grep@ wird sie finden.

@git --no-pager log@

Du möchtest kein @less@ für die Ausgabe der Übergaben benutzen. Diese Option liefert dir die direkte Ausgabe, falls du sie brauchst.

Natürlich kannst du die "Manpage":http://www.kernel.org/pub/software/scm/git/docs/git-log.html für alle verfügbaren Optionen konsultieren. Wenn du einen nützlichen Tip hast, den wir vergessen haben und du ihn gerne mitteilen möchtest, hinterlasse uns einen Kommentar und wir aktualisieren den Beitrag.
