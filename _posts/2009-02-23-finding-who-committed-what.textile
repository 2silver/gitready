---
layout: post
title: ¿quién modificó cada línea?
category: beginner
---

Puede que alguna vez necesites saber quién introdujo un bug en el repositorio, o tal vez quieras felicitar a algún compañero por cómo implementó un algoritmo determinado. Afortunadamente, el comando @git blame@ nos puede ayudar a determinar exactamente quién es responsable de cada línea de código y en qué commit se editó dicha línea.

La sintaxis más simple es @git blame <archivo>@. La salida de este comando generalmente es algo similar a esto:

p=. "!http://farm4.static.flickr.com/3606/3304779985_6c93865703.jpg!":http://farm4.static.flickr.com/3606/3304779985_2d1842b5f9_o.png

Para aquellos que estén confundidos, la salida de @git blame@ muestra el commit SHA abreviado, el nombre del archivo, el autor del commit, la fecha y hora del commit, el número de línea y finalmente, la línea en cuestión. 

Esto está muy bien, pero también hay otras maneras de obtener esta información. Por ejemplo, si tu código está en GitHub, puedes ver esta misma información así:

p=. "!http://farm4.static.flickr.com/3463/3305616220_05a91c8e70.jpg!":http://farm4.static.flickr.com/3463/3305616220_a7b2850e62_o.jpg

Otra forma de acceder a esta misma información es mediante "git-age":http://wiki.github.com/krig/git-age, una herramienta escrita en PyGtk. Además de la información mencionada, también muestra el Gravatar asociado con el email del autor de cada commit, y muestra los commits más antiguos con un color de fondo más oscuro.

p=. "!http://farm4.static.flickr.com/3454/3305608128_7000ca6fa2.jpg!":http://farm4.static.flickr.com/3454/3305608128_94edf84e1b_o.png

Si conoces más trucos sobre @git-blame@ u otras herramientas para mostrar esta información, ¡déjanos un comentario!

